// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Email.Business.AutoRrest
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StsApi.
    /// </summary>
    public static partial class StsApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamGuid'>
            /// </param>
            /// <param name='ownerGuid'>
            /// </param>
            public static object Search(this IStsApi operations, System.Guid? teamGuid = default(System.Guid?), System.Guid? ownerGuid = default(System.Guid?))
            {
                return operations.SearchAsync(teamGuid, ownerGuid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamGuid'>
            /// </param>
            /// <param name='ownerGuid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SearchAsync(this IStsApi operations, System.Guid? teamGuid = default(System.Guid?), System.Guid? ownerGuid = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(teamGuid, ownerGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static object Get(this IStsApi operations, System.Guid guid)
            {
                return operations.GetAsync(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IStsApi operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object Put(this IStsApi operations, System.Guid guid, TeamRequest model = default(TeamRequest))
            {
                return operations.PutAsync(guid, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutAsync(this IStsApi operations, System.Guid guid, TeamRequest model = default(TeamRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(guid, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static object Delete(this IStsApi operations, System.Guid guid)
            {
                return operations.DeleteAsync(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IStsApi operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object Post(this IStsApi operations, TeamRequest model = default(TeamRequest))
            {
                return operations.PostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this IStsApi operations, TeamRequest model = default(TeamRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamGuid'>
            /// </param>
            /// <param name='userGuid'>
            /// </param>
            public static object Search1(this IStsApi operations, System.Guid teamGuid, System.Guid? userGuid = default(System.Guid?))
            {
                return operations.Search1Async(teamGuid, userGuid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='teamGuid'>
            /// </param>
            /// <param name='userGuid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Search1Async(this IStsApi operations, System.Guid teamGuid, System.Guid? userGuid = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Search1WithHttpMessagesAsync(teamGuid, userGuid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static object Get1(this IStsApi operations, System.Guid guid)
            {
                return operations.Get1Async(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get1Async(this IStsApi operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get1WithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object Put1(this IStsApi operations, System.Guid guid, TeamUserRequest model = default(TeamUserRequest))
            {
                return operations.Put1Async(guid, model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Put1Async(this IStsApi operations, System.Guid guid, TeamUserRequest model = default(TeamUserRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Put1WithHttpMessagesAsync(guid, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static object Delete1(this IStsApi operations, System.Guid guid)
            {
                return operations.Delete1Async(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Delete1Async(this IStsApi operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Delete1WithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object Post1(this IStsApi operations, TeamUserRequest model = default(TeamUserRequest))
            {
                return operations.Post1Async(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Post1Async(this IStsApi operations, TeamUserRequest model = default(TeamUserRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post1WithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static UserModel Current(this IStsApi operations)
            {
                return operations.CurrentAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserModel> CurrentAsync(this IStsApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CurrentWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Login.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The credentials.
            /// </param>
            public static object Login(this IStsApi operations, LoginUserModel model = default(LoginUserModel))
            {
                return operations.LoginAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Login.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The credentials.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LoginAsync(this IStsApi operations, LoginUserModel model = default(LoginUserModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Register.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The user model.
            /// </param>
            public static object Register(this IStsApi operations, RegisterUserModel model = default(RegisterUserModel))
            {
                return operations.RegisterAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The user model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RegisterAsync(this IStsApi operations, RegisterUserModel model = default(RegisterUserModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static object Get2(this IStsApi operations, System.Guid guid)
            {
                return operations.Get2Async(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Get2Async(this IStsApi operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Get2WithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
